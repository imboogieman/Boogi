<?php

/**
 * This is the model class for table "country".
 *
 * The followings are the available columns in table 'country':
 * @property integer $id
 * @property string $name
 * @property string $iso2
 * @property string $iso3
 * @property string $numeric
 * @property string $standart
 *
 * The followings are the available model relations:
 * @property Venue[] $venues
 */
class Country extends CActiveRecord
{
    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'country';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('name, iso2, iso3, numeric, standart', 'required'),
            array('name', 'length', 'max' => 64),
            array('iso2', 'length', 'max' => 2),
            array('iso3, numeric', 'length', 'max' => 3),
            array('standart', 'length', 'max' => 16),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, name, iso2, iso3, numeric, standart', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'venues' => array(self::HAS_MANY, 'Venue', 'country_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => 'ID',
            'name' => 'Country',
            'iso2' => 'Iso2',
            'iso3' => 'Iso3',
            'numeric' => 'Numeric',
            'standart' => 'Standart',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('iso2', $this->iso2, true);
        $criteria->compare('iso3', $this->iso3, true);
        $criteria->compare('numeric', $this->numeric, true);
        $criteria->compare('standart', $this->standart, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return Country the static model class
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    /**
     * Return country by name
     * @param string $name
     * @return Country
     */
    public static function getByName($name)
    {
        if ($country = self::model()->find('name = :name', array(':name' => $name))) {
            return $country;
        }
    }

    /**
     * Return country by ISO2
     * @param string $iso2
     * @return Country
     */
    public static function getByISO2($iso2)
    {
        if ($country = self::model()->find('iso2 = :iso2', array(':iso2' => $iso2))) {
            return $country;
        }
    }
}

