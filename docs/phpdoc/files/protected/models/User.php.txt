<?php

/**
 * This is the model class for table "user".
 *
 * The followings are the available columns in table 'user':
 * @property integer $id
 * @property string $email
 * @property string $password
 * @property string $reset_hash
 * @property string $reset_datetime
 * @property string $timestamp
 *
 * The followings are the available model relations:
 * @property Gig[] $gigs
 * @property Promoter[] $promoters
 */
class User extends Model
{
    public $rememberMe;

    public $loginError;

    private $_identity;

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'user';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('email, password', 'required'),
            array('email', 'email', 'checkMX' => false, 'message' => 'Please enter a valid email!'),
            array('password', 'length', 'max' => 64),
            array('rememberMe', 'boolean'),
            array('timestamp', 'safe'),
            array('id, email, password, timestamp', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'gigs' => array(self::HAS_MANY, 'Gig', 'user_id'),
            'promoters' => array(self::HAS_MANY, 'Promoter', 'user_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => 'ID',
            'email' => 'Email',
            'password' => 'Password',
            'rememberMe' => 'Remember me next time',
            'timestamp' => 'Timestamp',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('timestamp', $this->timestamp, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    /**
     * Logs in the user using the given username and password in the model.
     * @return boolean whether login is successful
     */
    public function login()
    {
        if ($this->_identity === null) {
            $this->_identity = new UserIdentity($this->email, $this->password);
            $this->_identity->authenticate();
        }

        if ($this->_identity->errorCode === UserIdentity::ERROR_NONE) {
            $duration = 3600 * 24 * 30; // 30 days
            Yii::app()->user->login($this->_identity, $duration);
            return true;
        } else {
            $this->loginError = $this->_identity->errorCode;
            return false;
        }
    }

    /**
     * Checks if the given password is correct.
     * @param string the password to be validated
     * @return boolean whether the password is valid
     */
    public function validatePassword($password)
    {
        return CPasswordHelper::verifyPassword($password, $this->password);
    }

    /**
     * Generates the password hash.
     * @param string password
     * @return string hash
     */
    public function hashPassword($password)
    {
        return CPasswordHelper::hashPassword($password);
    }

    /**
     * Returns the static model of the specified AR class.
     * @param string $className
     * @return CActiveRecord the static model class
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    /**
     * Set random user pass
     * @return string $password
     */
    public function setRandomPass()
    {
        $password = substr(md5(time()), 0, 10);
        $this->password = CPasswordHelper::hashPassword($password);
        return $password;
    }

    /**
     * Set new user pass
     * @param string $password
     * @return bool
     */
    public function setNewPass($password)
    {
        $this->password = CPasswordHelper::hashPassword($password);
        return $this->save();
    }

    /**
     * Generate reset password link
     * @return bool|string
     */
    public function generateResetPasswordLink()
    {
        $this->reset_hash = md5($this->id . time());
        $this->reset_datetime = date('Y-m-d H:i:s', strtotime('+1 day'));

        if ($this->save()) {
            return 'http://' . Yii::app()->request->serverName . '/site/newpass/?hash=' . $this->reset_hash;
        }

        return false;
    }

    /**
     * Restore user password
     * @return bool $status
     */
    public function restorePassword()
    {
        $resetLink = $this->generateResetPasswordLink();
        if ($resetLink) {
            $email = Yii::app()->email;
            $email->to = $this->email;
            $email->subject = 'Reset password at Starway';
            $email->message = 'If you requested a password reset then follow <a href="' . $resetLink . '">this link</a>, otherwise just ignore this email. ';

            return $email->send();
        }

        return false;
    }
}

